"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const common_1 = require("./common");
const UnsupportedSyntaxMessage = "{{name}} is not a supported syntax within a worklet.";
const createRule = experimental_utils_1.ESLintUtils.RuleCreator((name) => {
    return `https://github.com/wcandillon/eslint-plugin-reanimated/blob/master/docs/${name}.md`;
});
// eslint-disable-next-line import/no-default-export
exports.default = createRule({
    name: "unsupported-syntax",
    meta: {
        type: "problem",
        docs: {
            description: "Some syntaxes are not a supported within a worklet.",
            recommended: "error",
        },
        fixable: "code",
        schema: [],
        messages: {
            UnsupportedSyntaxMessage,
        },
    },
    defaultOptions: [],
    create: (context) => {
        const state = common_1.createState();
        return Object.assign(Object.assign({}, common_1.detectWorklet(state)), { ForOfStatement: (node) => {
                if (state.callerIsWorklet) {
                    context.report({
                        messageId: "UnsupportedSyntaxMessage",
                        node,
                        data: {
                            name: "for in/of",
                        },
                    });
                }
            }, ForInStatement: (node) => {
                if (state.callerIsWorklet) {
                    context.report({
                        messageId: "UnsupportedSyntaxMessage",
                        node,
                        data: {
                            name: "for in/of",
                        },
                    });
                }
            }, 
            /*
            ObjectPattern: (node) => {
              if (state.callerIsWorklet) {
                context.report({
                  messageId: "UnsupportedSyntaxMessage",
                  node,
                  data: {
                    name: "Object destructuring",
                  },
                });
              }
            },
            */
            SpreadElement: (node) => {
                if (state.callerIsWorklet) {
                    context.report({
                        messageId: "UnsupportedSyntaxMessage",
                        node,
                        data: {
                            name: "The spread operator",
                        },
                    });
                }
            } });
    },
});
