"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const createRule = experimental_utils_1.ESLintUtils.RuleCreator((name) => {
    return `https://github.com/wcandillon/eslint-plugin-reanimated/blob/master/docs/${name}.md`;
});
const NoMultipleAnimatedStyleUsagesMessage = "{{name}} cannot be used multiple times. Use separate useAnimatedStyle() calls instead.";
// eslint-disable-next-line import/no-default-export
exports.default = createRule({
    name: "no-multiple-animated-style-usages",
    meta: {
        type: "problem",
        docs: {
            description: "Animated styles cannot be used multiple times. Call useAnimatedStyle() multiple times instead.",
            recommended: "error",
        },
        schema: [],
        messages: {
            NoMultipleAnimatedStyleUsagesMessage,
        },
    },
    defaultOptions: [],
    create: (context) => {
        const animatedStyleReferences = new Map();
        const checkIdentifier = (node) => {
            const found = Array.from(animatedStyleReferences.keys()).find(({ references }) => references.map(({ identifier }) => identifier).includes(node));
            if (!found) {
                return;
            }
            animatedStyleReferences.set(found, [
                ...animatedStyleReferences.get(found),
                node,
            ]);
        };
        return {
            "CallExpression[callee.name='useAnimatedStyle']": (node) => {
                const { parent } = node;
                if (!parent) {
                    return;
                }
                const declaredVariables = context.getDeclaredVariables(context.parserServices.tsNodeToESTreeNodeMap.get(parent));
                const [variable] = declaredVariables;
                if (!variable) {
                    return;
                }
                animatedStyleReferences.set(variable, []);
            },
            "JSXAttribute Identifier": checkIdentifier,
            "Program:exit": () => {
                for (const [, identifiers] of animatedStyleReferences) {
                    if (identifiers.length < 2) {
                        continue;
                    }
                    identifiers.forEach((identifier) => {
                        context.report({
                            messageId: "NoMultipleAnimatedStyleUsagesMessage",
                            node: identifier,
                            data: {
                                name: identifier.name,
                            },
                        });
                    });
                }
            },
        };
    },
});
