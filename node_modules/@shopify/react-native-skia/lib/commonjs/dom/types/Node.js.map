{"version":3,"names":[],"sources":["Node.ts"],"sourcesContent":["import type {\n  SkColorFilter,\n  SkImageFilter,\n  SkMaskFilter,\n  SkPaint,\n  SkPathEffect,\n  SkShader,\n} from \"../../skia/types\";\n\nimport type { GroupProps } from \"./Common\";\nimport type { DrawingContext } from \"./DrawingContext\";\nimport type { DeclarationType, NodeType } from \"./NodeType\";\n\nexport interface Node<P> {\n  type: NodeType;\n\n  setProps(props: P): void;\n  setProp<K extends keyof P>(name: K, v: P[K]): boolean;\n  getProps(): P;\n\n  children(): Node<unknown>[];\n  addChild(child: Node<unknown>): void;\n  removeChild(child: Node<unknown>): void;\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>): void;\n}\n\nexport type Invalidate = () => void;\n\nexport interface DeclarationNode<P, T, Nullable extends null | never = never>\n  extends Node<P> {\n  declarationType: DeclarationType;\n  materialize(): T | Nullable;\n\n  setInvalidate(invalidate: Invalidate): void;\n\n  isPaint(): this is DeclarationNode<unknown, SkPaint>;\n  isImageFilter(): this is DeclarationNode<unknown, SkImageFilter>;\n  isColorFilter(): this is DeclarationNode<unknown, SkColorFilter>;\n  isShader(): this is DeclarationNode<unknown, SkShader>;\n  isMaskFilter(): this is DeclarationNode<unknown, SkMaskFilter>;\n  isPathEffect(): this is DeclarationNode<unknown, SkPathEffect>;\n}\n\nexport interface RenderNode<P extends GroupProps> extends Node<P> {\n  render(ctx: DrawingContext): void;\n}\n"],"mappings":""}