{"version":3,"names":["JsiSkImage","HostObject","constructor","CanvasKit","ref","height","width","makeShaderOptions","tx","ty","fm","mm","localMatrix","JsiSkShader","ckEnum","JsiSkMatrix","fromValue","undefined","makeShaderCubic","B","C","encodeToBytes","fmt","quality","result","Error","encodeToBase64","bytes","btoa","String","fromCharCode"],"sources":["JsiSkImage.ts"],"sourcesContent":["/*global btoa, atob*/\nimport type { CanvasKit, Image } from \"canvaskit-wasm\";\n\nimport type {\n  ImageFormat,\n  FilterMode,\n  MipmapMode,\n  SkImage,\n  SkMatrix,\n  SkShader,\n  TileMode,\n} from \"../types\";\n\nimport { ckEnum, HostObject } from \"./Host\";\nimport { JsiSkMatrix } from \"./JsiSkMatrix\";\nimport { JsiSkShader } from \"./JsiSkShader\";\n\nexport class JsiSkImage extends HostObject<Image, \"Image\"> implements SkImage {\n  constructor(CanvasKit: CanvasKit, ref: Image) {\n    super(CanvasKit, ref, \"Image\");\n  }\n\n  height() {\n    return this.ref.height();\n  }\n\n  width() {\n    return this.ref.width();\n  }\n\n  makeShaderOptions(\n    tx: TileMode,\n    ty: TileMode,\n    fm: FilterMode,\n    mm: MipmapMode,\n    localMatrix?: SkMatrix\n  ): SkShader {\n    return new JsiSkShader(\n      this.CanvasKit,\n      this.ref.makeShaderOptions(\n        ckEnum(tx),\n        ckEnum(ty),\n        ckEnum(fm),\n        ckEnum(mm),\n        localMatrix ? JsiSkMatrix.fromValue(localMatrix) : undefined\n      )\n    );\n  }\n\n  makeShaderCubic(\n    tx: TileMode,\n    ty: TileMode,\n    B: number,\n    C: number,\n    localMatrix?: SkMatrix\n  ): SkShader {\n    return new JsiSkShader(\n      this.CanvasKit,\n      this.ref.makeShaderCubic(\n        ckEnum(tx),\n        ckEnum(ty),\n        B,\n        C,\n        localMatrix ? JsiSkMatrix.fromValue(localMatrix) : undefined\n      )\n    );\n  }\n\n  encodeToBytes(fmt?: ImageFormat, quality?: number) {\n    let result: Uint8Array | null;\n    if (fmt && quality) {\n      result = this.ref.encodeToBytes(ckEnum(fmt), quality);\n    } else if (fmt) {\n      result = this.ref.encodeToBytes(ckEnum(fmt));\n    } else {\n      result = this.ref.encodeToBytes();\n    }\n    if (!result) {\n      throw new Error(\"encodeToBytes failed\");\n    }\n    return result;\n  }\n\n  encodeToBase64(fmt?: ImageFormat, quality?: number) {\n    const bytes = this.encodeToBytes(fmt, quality);\n    return btoa(String.fromCharCode(...bytes));\n  }\n}\n"],"mappings":";;;;;;;AAaA;;AACA;;AACA;;AAfA;AAiBO,MAAMA,UAAN,SAAyBC,gBAAzB,CAAuE;EAC5EC,WAAW,CAACC,SAAD,EAAuBC,GAAvB,EAAmC;IAC5C,MAAMD,SAAN,EAAiBC,GAAjB,EAAsB,OAAtB;EACD;;EAEDC,MAAM,GAAG;IACP,OAAO,KAAKD,GAAL,CAASC,MAAT,EAAP;EACD;;EAEDC,KAAK,GAAG;IACN,OAAO,KAAKF,GAAL,CAASE,KAAT,EAAP;EACD;;EAEDC,iBAAiB,CACfC,EADe,EAEfC,EAFe,EAGfC,EAHe,EAIfC,EAJe,EAKfC,WALe,EAML;IACV,OAAO,IAAIC,wBAAJ,CACL,KAAKV,SADA,EAEL,KAAKC,GAAL,CAASG,iBAAT,CACE,IAAAO,YAAA,EAAON,EAAP,CADF,EAEE,IAAAM,YAAA,EAAOL,EAAP,CAFF,EAGE,IAAAK,YAAA,EAAOJ,EAAP,CAHF,EAIE,IAAAI,YAAA,EAAOH,EAAP,CAJF,EAKEC,WAAW,GAAGG,wBAAA,CAAYC,SAAZ,CAAsBJ,WAAtB,CAAH,GAAwCK,SALrD,CAFK,CAAP;EAUD;;EAEDC,eAAe,CACbV,EADa,EAEbC,EAFa,EAGbU,CAHa,EAIbC,CAJa,EAKbR,WALa,EAMH;IACV,OAAO,IAAIC,wBAAJ,CACL,KAAKV,SADA,EAEL,KAAKC,GAAL,CAASc,eAAT,CACE,IAAAJ,YAAA,EAAON,EAAP,CADF,EAEE,IAAAM,YAAA,EAAOL,EAAP,CAFF,EAGEU,CAHF,EAIEC,CAJF,EAKER,WAAW,GAAGG,wBAAA,CAAYC,SAAZ,CAAsBJ,WAAtB,CAAH,GAAwCK,SALrD,CAFK,CAAP;EAUD;;EAEDI,aAAa,CAACC,GAAD,EAAoBC,OAApB,EAAsC;IACjD,IAAIC,MAAJ;;IACA,IAAIF,GAAG,IAAIC,OAAX,EAAoB;MAClBC,MAAM,GAAG,KAAKpB,GAAL,CAASiB,aAAT,CAAuB,IAAAP,YAAA,EAAOQ,GAAP,CAAvB,EAAoCC,OAApC,CAAT;IACD,CAFD,MAEO,IAAID,GAAJ,EAAS;MACdE,MAAM,GAAG,KAAKpB,GAAL,CAASiB,aAAT,CAAuB,IAAAP,YAAA,EAAOQ,GAAP,CAAvB,CAAT;IACD,CAFM,MAEA;MACLE,MAAM,GAAG,KAAKpB,GAAL,CAASiB,aAAT,EAAT;IACD;;IACD,IAAI,CAACG,MAAL,EAAa;MACX,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;IACD;;IACD,OAAOD,MAAP;EACD;;EAEDE,cAAc,CAACJ,GAAD,EAAoBC,OAApB,EAAsC;IAClD,MAAMI,KAAK,GAAG,KAAKN,aAAL,CAAmBC,GAAnB,EAAwBC,OAAxB,CAAd;IACA,OAAOK,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoB,GAAGH,KAAvB,CAAD,CAAX;EACD;;AArE2E"}