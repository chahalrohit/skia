import { NodeType } from "../types";
import { JsiRenderNode } from "./RenderNode";
import { JsiDeclarationNode } from "./Node";

const isLayer = node => node instanceof JsiDeclarationNode && node.isPaint();

export class LayerNode extends JsiRenderNode {
  constructor(ctx, props) {
    super(ctx, NodeType.Layer, props);
  }

  renderNode(ctx) {
    const [layer, ...children] = this.children();

    if (isLayer(layer)) {
      const paint = layer.materialize();
      ctx.canvas.saveLayer(paint);
    }

    children.map(child => {
      if (child instanceof JsiRenderNode) {
        child.render(ctx);
      }
    });

    if (isLayer(layer)) {
      ctx.canvas.restore();
    }
  }

}
//# sourceMappingURL=LayerNode.js.map